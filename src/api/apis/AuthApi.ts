/* tslint:disable */
/* eslint-disable */
/**
 * Chat - API
 * Chat - API Description
 *
 * The version of the OpenAPI document: 1.1.58
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordDTO,
  LoginDTO,
  LoginResponseDTO,
  RegisterDTO,
  UserResponseDTO,
} from '../models';
import {
    ChangePasswordDTOFromJSON,
    ChangePasswordDTOToJSON,
    LoginDTOFromJSON,
    LoginDTOToJSON,
    LoginResponseDTOFromJSON,
    LoginResponseDTOToJSON,
    RegisterDTOFromJSON,
    RegisterDTOToJSON,
    UserResponseDTOFromJSON,
    UserResponseDTOToJSON,
} from '../models';

export interface AuthControllerGetUsersRequest {
    changePasswordDTO: ChangePasswordDTO;
}

export interface AuthControllerLoginRequest {
    loginDTO: LoginDTO;
}

export interface AuthControllerRegisterRequest {
    registerDTO: RegisterDTO;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Change password
     * 
     */
    async authControllerGetUsersRaw(requestParameters: AuthControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponseDTO>>> {
        if (requestParameters.changePasswordDTO === null || requestParameters.changePasswordDTO === undefined) {
            throw new runtime.RequiredError('changePasswordDTO','Required parameter requestParameters.changePasswordDTO was null or undefined when calling authControllerGetUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/app/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordDTOToJSON(requestParameters.changePasswordDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseDTOFromJSON));
    }

    /**
     * Change password
     * 
     */
    async authControllerGetUsers(requestParameters: AuthControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponseDTO>> {
        const response = await this.authControllerGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login with username and password
     * 
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDTO>> {
        if (requestParameters.loginDTO === null || requestParameters.loginDTO === undefined) {
            throw new runtime.RequiredError('loginDTO','Required parameter requestParameters.loginDTO was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/app/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDTOToJSON(requestParameters.loginDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDTOFromJSON(jsonValue));
    }

    /**
     * Login with username and password
     * 
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDTO> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user
     * 
     */
    async authControllerRegisterRaw(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDTO>> {
        if (requestParameters.registerDTO === null || requestParameters.registerDTO === undefined) {
            throw new runtime.RequiredError('registerDTO','Required parameter requestParameters.registerDTO was null or undefined when calling authControllerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/app/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDTOToJSON(requestParameters.registerDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDTOFromJSON(jsonValue));
    }

    /**
     * Register a new user
     * 
     */
    async authControllerRegister(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDTO> {
        const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
