/* tslint:disable */
/* eslint-disable */
/**
 * Chat - API
 * Chat - API Description
 *
 * The version of the OpenAPI document: 1.1.58
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VersionDTO,
} from '../models';
import {
    VersionDTOFromJSON,
    VersionDTOToJSON,
} from '../models';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * This is the debug endpoint. It just returns text.
     * 
     */
    async appControllerGetDebugRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app/debug`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the debug endpoint. It just returns text.
     * 
     */
    async appControllerGetDebug(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerGetDebugRaw(initOverrides);
    }

    /**
     * Get version of the current backend
     * 
     */
    async appControllerGetVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionDTOFromJSON(jsonValue));
    }

    /**
     * Get version of the current backend
     * 
     */
    async appControllerGetVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionDTO> {
        const response = await this.appControllerGetVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async statusMonitorControllerGetDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app/status/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statusMonitorControllerGetData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statusMonitorControllerGetDataRaw(initOverrides);
    }

    /**
     */
    async statusMonitorControllerRootRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/app/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statusMonitorControllerRoot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statusMonitorControllerRootRaw(initOverrides);
    }

}
