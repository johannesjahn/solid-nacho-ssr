/* tslint:disable */
/* eslint-disable */
/**
 * Chat - API
 * Chat - API Description
 *
 * The version of the OpenAPI document: 1.1.52
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReplyResponseDTO } from './ReplyResponseDTO';
import {
    ReplyResponseDTOFromJSON,
    ReplyResponseDTOFromJSONTyped,
    ReplyResponseDTOToJSON,
} from './ReplyResponseDTO';
import type { UserResponseDTO } from './UserResponseDTO';
import {
    UserResponseDTOFromJSON,
    UserResponseDTOFromJSONTyped,
    UserResponseDTOToJSON,
} from './UserResponseDTO';

/**
 * 
 * @export
 * @interface CommentResponseDTO
 */
export interface CommentResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof CommentResponseDTO
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof CommentResponseDTO
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommentResponseDTO
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof CommentResponseDTO
     */
    content: string;
    /**
     * 
     * @type {UserResponseDTO}
     * @memberof CommentResponseDTO
     */
    author: UserResponseDTO | null;
    /**
     * 
     * @type {Array<ReplyResponseDTO>}
     * @memberof CommentResponseDTO
     */
    replies: Array<ReplyResponseDTO>;
}

/**
 * Check if a given object implements the CommentResponseDTO interface.
 */
export function instanceOfCommentResponseDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "replies" in value;

    return isInstance;
}

export function CommentResponseDTOFromJSON(json: any): CommentResponseDTO {
    return CommentResponseDTOFromJSONTyped(json, false);
}

export function CommentResponseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentResponseDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'content': json['content'],
        'author': UserResponseDTOFromJSON(json['author']),
        'replies': ((json['replies'] as Array<any>).map(ReplyResponseDTOFromJSON)),
    };
}

export function CommentResponseDTOToJSON(value?: CommentResponseDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'content': value.content,
        'author': UserResponseDTOToJSON(value.author),
        'replies': ((value.replies as Array<any>).map(ReplyResponseDTOToJSON)),
    };
}

