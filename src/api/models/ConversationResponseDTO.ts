/* tslint:disable */
/* eslint-disable */
/**
 * Chat - API
 * Chat - API Description
 *
 * The version of the OpenAPI document: 1.1.58
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MessageResponseDTO } from './MessageResponseDTO';
import {
    MessageResponseDTOFromJSON,
    MessageResponseDTOFromJSONTyped,
    MessageResponseDTOToJSON,
} from './MessageResponseDTO';
import type { UserResponseDTO } from './UserResponseDTO';
import {
    UserResponseDTOFromJSON,
    UserResponseDTOFromJSONTyped,
    UserResponseDTOToJSON,
} from './UserResponseDTO';

/**
 * 
 * @export
 * @interface ConversationResponseDTO
 */
export interface ConversationResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof ConversationResponseDTO
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof ConversationResponseDTO
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ConversationResponseDTO
     */
    updatedAt: Date;
    /**
     * 
     * @type {Array<UserResponseDTO>}
     * @memberof ConversationResponseDTO
     */
    participants: Array<UserResponseDTO>;
    /**
     * 
     * @type {Array<MessageResponseDTO>}
     * @memberof ConversationResponseDTO
     */
    messages: Array<MessageResponseDTO>;
    /**
     * 
     * @type {MessageResponseDTO}
     * @memberof ConversationResponseDTO
     */
    lastMessage: MessageResponseDTO | null;
}

/**
 * Check if a given object implements the ConversationResponseDTO interface.
 */
export function instanceOfConversationResponseDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "participants" in value;
    isInstance = isInstance && "messages" in value;
    isInstance = isInstance && "lastMessage" in value;

    return isInstance;
}

export function ConversationResponseDTOFromJSON(json: any): ConversationResponseDTO {
    return ConversationResponseDTOFromJSONTyped(json, false);
}

export function ConversationResponseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationResponseDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'participants': ((json['participants'] as Array<any>).map(UserResponseDTOFromJSON)),
        'messages': ((json['messages'] as Array<any>).map(MessageResponseDTOFromJSON)),
        'lastMessage': MessageResponseDTOFromJSON(json['lastMessage']),
    };
}

export function ConversationResponseDTOToJSON(value?: ConversationResponseDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'participants': ((value.participants as Array<any>).map(UserResponseDTOToJSON)),
        'messages': ((value.messages as Array<any>).map(MessageResponseDTOToJSON)),
        'lastMessage': MessageResponseDTOToJSON(value.lastMessage),
    };
}

